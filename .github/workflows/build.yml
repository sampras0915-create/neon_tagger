name: Build Android APK (clean, 6h, ffi-fix)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6時間まで実行を許可

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME:     ${{ github.workspace }}/android-sdk
      P4A_NO_DEPS_CHECK: "1"
      PYTHONFORANDROID_NO_DEPS_CHECK: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- 完全クリーン
      - name: Hard clean previous Android env
        run: |
          set -eux
          rm -rf "${ANDROID_SDK_ROOT}"
          rm -rf "$HOME/.buildozer" || true
          rm -rf "$HOME/.python-for-android" || true

      # ---- OS 依存パッケージ（libffi/autotools 対策を含む）
      - name: Install OS deps
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            zip unzip git curl make \
            python3 python3-pip python3-setuptools \
            libffi-dev libssl-dev liblzma-dev \
            autoconf automake libtool libtool-bin pkg-config \
            gettext gperf m4 gawk

      # ---- Autotools 検索パスをグローバルに
      - name: Export autotools env
        run: |
          set -eux
          {
            echo "ACLOCAL_PATH=/usr/share/aclocal"
            echo "LIBTOOLIZE=libtoolize"
          } >> "$GITHUB_ENV"

      # ---- libffi のヘッダー/ライブラリ探索を確実に（CFLAGS/LDFLAGS）
      - name: Export compile flags for libffi
        run: |
          set -eux
          CFLAGS="-I/usr/include -I/usr/include/x86_64-linux-gnu"
          LDFLAGS="-L/usr/lib/x86_64-linux-gnu"
          {
            echo "CFLAGS=${CFLAGS}"
            echo "LDFLAGS=${LDFLAGS}"
          } >> "$GITHUB_ENV"

      # ---- JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # ---- Python / buildozer
      - name: Install Python deps
        run: |
          set -eux
          python3 -m pip install --upgrade pip wheel
          python3 -m pip install "Cython==0.29.36" buildozer python-for-android virtualenv sh

      # ---- Android cmdline-tools（毎回クリーン配備）
      - name: Install Android cmdline-tools
        run: |
          set -eux
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd "${ANDROID_SDK_ROOT}/cmdline-tools"
          curl -fsSL -o cmdline-tools.zip \
            https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip && rm -f cmdline-tools.zip
          mv cmdline-tools latest
          # tools ディレクトリ“ごと” latest へリンク（ClassNotFound対策）
          ln -sfn "${ANDROID_SDK_ROOT}/cmdline-tools/latest" "${ANDROID_SDK_ROOT}/tools"

      # ---- Buildozer が必ずこの SDK を使うように再リンク＋PATH
      - name: Link SDK for Buildozer (compat) & PATH
        run: |
          set -eux
          echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/platform-tools"          >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/build-tools/36.1.0"      >> $GITHUB_PATH
          mkdir -p "$HOME/.buildozer/android/platform"
          ln -sfn "${ANDROID_SDK_ROOT}" "$HOME/.buildozer/android/platform/android-sdk"

      # ---- SDK/NDK を新規導入（フルパスで健全性チェック）
      - name: Accept Android licenses & install packages
        run: |
          set -eux
          SDKM="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          "${SDKM}" --version
          yes | "${SDKM}" --licenses
          "${SDKM}" --install \
            "platform-tools" \
            "build-tools;36.1.0" \
            "platforms;android-33" \
            "ndk;25.1.8937393"
          {
            echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/25.1.8937393"
            echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/25.1.8937393"
            echo "ANDROIDSDK=${ANDROID_SDK_ROOT}"
            echo "ANDROIDNDK=${ANDROID_SDK_ROOT}/ndk/25.1.8937393"
            echo "ANDROIDAPI=33"
            echo "NDKAPI=21"
          } >> "$GITHUB_ENV"

      # ---- ビルド（逐次フラッシュ＋aclocal/CFLAGS/LDFLAGS を直前にも export）
      - name: Build APK
        run: |
          set -eux
          # autotools/ffi を子プロセスにも確実に伝える
          export ACLOCAL_PATH="${ACLOCAL_PATH:-/usr/share/aclocal}"
          export ACLOCAL="aclocal -I ${ACLOCAL_PATH}"
          export LIBTOOLIZE="${LIBTOOLIZE:-libtoolize}"
          export CFLAGS="${CFLAGS:-} -I/usr/include -I/usr/include/x86_64-linux-gnu"
          export LDFLAGS="${LDFLAGS:-} -L/usr/lib/x86_64-linux-gnu"
          which libtoolize; libtoolize --version || true
          which aclocal;    aclocal --print-ac-dir || true
          echo "CFLAGS=${CFLAGS}"
          echo "LDFLAGS=${LDFLAGS}"

          # ログ途切れ防止・逐次表示
          stdbuf -oL -eL buildozer -v android debug 2>&1 | tee buildozer.console.log

      # ---- 生成物を広めに回収
      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: |
            bin/*.apk
            .buildozer/android/platform/**/dists/*/bin/*.apk
            .buildozer/android/platform/**/dists/*/*.apk
          if-no-files-found: warn
          retention-days: 14

      # ---- ログは常に保存
      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            buildozer.console.log
            ./.buildozer/buildozer.log
            ./.buildozer/**/buildozer.log
            ./.buildozer/android/platform/**/dists/*/build/*.log
            ./.buildozer/android/platform/**/dists/*/build-*.txt
          if-no-files-found: warn
          retention-days: 14
