name: Build Android APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      fresh_setup:
        description: "Force fresh Android SDK/NDK setup (cache bypass)"
        type: boolean
        default: false
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME:     ${{ github.workspace }}/android-sdk
      SDK_BUILD_TOOLS:  "34.0.0"           # 安定版に固定
      SDK_PLATFORM:     "android-33"
      NDK_VERSION:      "25.1.8937393"     # p4a がデフォで欲しがる r25b
      P4A_NO_DEPS_CHECK: "1"
      PYTHONFORANDROID_NO_DEPS_CHECK: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ===== Caches（ビルド時間短縮 / 再実行に強い）
      - name: Restore cache (.buildozer & p4a)
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            ~/.python-for-android
          key: buildozer-${{ runner.os }}-v3-${{ hashFiles('buildozer.spec', '**/*.py') }}
          restore-keys: |
            buildozer-${{ runner.os }}-v3-
      - name: Restore cache (Gradle / Android build cache)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: gradle-${{ runner.os }}-v1-${{ hashFiles('**/*.gradle*', 'buildozer.spec') }}
          restore-keys: |
            gradle-${{ runner.os }}-v1-

      # ===== OS deps（過去の libffi/autotools 系エラー予防も含む）
      - name: Install OS deps
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            zip unzip git curl \
            python3 python3-pip python3-setuptools \
            libffi-dev libssl-dev liblzma-dev \
            autoconf automake libtool pkg-config

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # ===== Python / buildozer
      - name: Install Python deps
        run: |
          set -eux
          python3 -m pip install --upgrade pip wheel
          python3 -m pip install "Cython==0.29.36" buildozer python-for-android virtualenv sh

      # ===== Android cmdline-tools（tools を latest へディレクトリごとリンク）
      - name: Install Android cmdline-tools
        if: ${{ inputs.fresh_setup || steps.cache-sdk.outputs.cache-hit != 'true' }}
        run: |
          set -eux
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd "${ANDROID_SDK_ROOT}/cmdline-tools"
          curl -fsSL -o cmdline-tools.zip \
            https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip && rm -f cmdline-tools.zip
          mv cmdline-tools latest
          # ★ 重要：tools/bin ではなく tools -> latest にリンク
          ln -sfn "${ANDROID_SDK_ROOT}/cmdline-tools/latest" "${ANDROID_SDK_ROOT}/tools"

      # ===== PATH と Buildozer の既定パス（.buildozer 配下）にSDKを見せる
      - name: Link SDK for Buildozer (compat) & PATH
        run: |
          set -eux
          echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/platform-tools"          >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/build-tools/${SDK_BUILD_TOOLS}" >> $GITHUB_PATH
          mkdir -p "$HOME/.buildozer/android/platform"
          ln -sfn "${ANDROID_SDK_ROOT}" "$HOME/.buildozer/android/platform/android-sdk"

      # ===== SDK/NDK を明示導入（sdkmanager はフルパスで/事前動作確認）
      - name: Accept Android licenses & install packages
        run: |
          set -eux
          SDKM="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          "${SDKM}" --version
          yes | "${SDKM}" --licenses
          "${SDKM}" --install \
            "platform-tools" \
            "build-tools;${SDK_BUILD_TOOLS}" \
            "platforms;${SDK_PLATFORM}" \
            "ndk;${NDK_VERSION}"
          # Buildozer/p4a が読む環境変数を明示
          {
            echo "ANDROIDSDK=${ANDROID_SDK_ROOT}"
            echo "ANDROIDNDK=${ANDROID_SDK_ROOT}/ndk/${NDK_VERSION}"
            echo "ANDROIDAPI=${SDK_PLATFORM#android-}"
            echo "NDKAPI=21"
            echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/${NDK_VERSION}"
            echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/${NDK_VERSION}"
          } >> "$GITHUB_ENV"

      # ===== デバッグ短縮出力（sdkmanager クラスパス崩れの早期検知）
      - name: SDK preflight
        run: |
          set -eux
          "${ANDROID_SDK_ROOT}/tools/bin/sdkmanager" --version
          ls -la "${ANDROID_SDK_ROOT}/tools/lib" || true
          ls -la "${ANDROID_SDK_ROOT}/build-tools/${SDK_BUILD_TOOLS}" || true

      # ===== Build（標準出力を必ずログへも保存）
      - name: Build APK
        run: |
          set -eux
          ( buildozer -v android debug ) 2>&1 | tee buildozer.console.log

      # ===== APK（p4aの出力場所を広めに拾う）
      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: |
            bin/*.apk
            .buildozer/android/platform/**/dists/*/bin/*.apk
            .buildozer/android/platform/**/dists/*/*.apk
          if-no-files-found: warn
          retention-days: 14

      # ===== ログ（常に保存、後追い解析しやすいよう広めに）
      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            buildozer.console.log
            ./.buildozer/buildozer.log
            ./.buildozer/**/buildozer.log
            ./.buildozer/android/platform/**/dists/*/build/*.log
            ./.buildozer/android/platform/**/dists/*/build-*.txt
          if-no-files-found: warn
          retention-days: 14
