name: Build Android APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:  # ← 手動実行ボタン

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
      P4A_NO_DEPS_CHECK: "1"
      PYTHONFORANDROID_NO_DEPS_CHECK: "1"

    steps:
      - uses: actions/checkout@v4

      # 1) 必要パッケージ
      - name: Install base packages
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            python3 python3-pip python3-venv git unzip zip curl \
            openjdk-17-jdk build-essential libz-dev libffi-dev libssl-dev libncurses5
          python3 -m pip install --upgrade pip wheel setuptools

      # 2) Android SDK(cmdline-tools) を配置
      - name: Install Android cmdline-tools
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          rm -f cmdline-tools.zip
          # 展開物は cmdline-tools/ 配下に入るので latest へ移動
          mv cmdline-tools latest || true
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "SDKMANAGER=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" >> "$GITHUB_ENV"

      # 3) SDK/NDK とライセンス承認（安定版に固定）
      - name: Install Android packages & accept licenses
        shell: bash
        run: |
          set -euxo pipefail
          source "$GITHUB_ENV"
          yes | "$SDKMANAGER" --sdk_root="$ANDROID_SDK_ROOT" --licenses > /dev/null || true
          "$SDKMANAGER" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;35.0.0" \
            "ndk;26.3.11579264"

      # 4) Buildozer / python-for-android を導入
      - name: Install Buildozer & p4a
        shell: bash
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade "Cython<3" buildozer "python-for-android<2025.0"
          # user-base/bin を PATH に追加（buildozer 実体）
          echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"
          buildozer --version
          git --version

      # 5) Buildozer が参照する環境値を明示
      - name: Configure Buildozer env
        shell: bash
        run: |
          set -eux
          echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROIDNDK=$ANDROID_SDK_ROOT/ndk/26.3.11579264" >> "$GITHUB_ENV"
          echo "ANDROIDAPI=33" >> "$GITHUB_ENV"
          echo "NDKAPI=21" >> "$GITHUB_ENV"

      # 6) ビルド
      - name: Build with Buildozer
        shell: bash
        env:
          P4A_NO_DEPS_CHECK: "1"
          PYTHONFORANDROID_NO_DEPS_CHECK: "1"
        run: |
          set -euxo pipefail
          buildozer -v android debug

      # 7) 生成APKを成果物にアップロード
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: neon-tagger-apk
          path: bin/*.apk
